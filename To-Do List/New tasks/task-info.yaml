type: edu
files:
- name: src/index.html
  visible: true
  text: |
    <!DOCTYPE html>
    <html lang="pl-PL">
    <head>
        <meta charset="UTF-8">
        <title>todo</title>
        <!-- CSS only -->
        <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.1/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-F3w7mX95PdgyTmZZMECAngseQB83DfGTowi0iMjiWaeVhAn4FJkqJByhZMI3AhiU" crossorigin="anonymous">
        <!-- JavaScript Bundle with Popper -->
        <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.1/dist/js/bootstrap.bundle.min.js" integrity="sha384-/bQdsTh/da6pkI1MST/rWKFNjaCP5gBSY4sEBT38Q/9RBh9AH40zEOg7Hlq2THRZ" crossorigin="anonymous"></script>




    </head>
    <body>


    <div class="jumbotron jumbotron-fluid">
        <div class="container">
            <h1 class="display-4">To Do List!</h1>
            <p class="lead">This is to do list:</p>
            <hr class="my-4">
        </div>
    </div>


    <div class="container">
        <form class="form-inline">
            <div class="row">
                <div class="col-6">
                    <input type="text" class="form-control" id="input-task" placeholder="to do task">
                </div>
                <div class="col">
                    <button type="submit" class="btn btn-primary mb-2" id="add-task-button">Confirm</button>
                </div>
            </div>
        </form>
    </div>


    <div class="container" id="wykaz">
        <div class="col-7">
            <ul class="list-group" id="task-list">

                <li class="list-group-item">
                    <div class="d-flex justify-content-between">
                        <div>
                            <input class="form-check-input me-1" type="checkbox" value="" aria-label="...">
                            <span class="task">First checkbox</span>
                        </div>
                        <div>
                            <button type="button" class="delete-btn close" aria-label="Close">
                                <span aria-hidden="true">&times;</span>
                            </button>
                        </div>
                    </div>
                </li>

                <li class="list-group-item">
                    <div class="d-flex justify-content-between">
                        <div>
                            <input class="form-check-input me-1" type="checkbox" value="" aria-label="...">
                            <span class="task">Second checkbox</span>
                        </div>
                        <div>
                            <button type="button" class="delete-btn" aria-label="Close">
                                <span aria-hidden="true">&times;</span>
                            </button>
                        </div>
                    </div>
                </li>

                <li class="list-group-item">
                    <div class="d-flex justify-content-between">
                        <div>
                            <input class="form-check-input me-1" type="checkbox" value="" aria-label="...">
                            <span class="task">Third checkbox</span>
                        </div>
                        <div>
                            <button type="button" class="delete-btn" aria-label="Close">
                                <span aria-hidden="true">&times;</span>
                            </button>
                        </div>
                    </div>
                </li>

            </ul>

        </div>
    </div>

    <script >


    </script>
    </body>
    </html>
  learner_created: false
- name: test/test.js
  visible: false
  text: |
    const puppeteer = require('puppeteer');
    const path = require('path');
    // '..' since we're in the test/ subdirectory; learner is supposed to have src/index.html
    const pagePath = 'file://' + path.resolve(__dirname, '../src/index.html');
    const hs = require('hs-test-web');
    const sleep = (ms) => new Promise(res => setTimeout(res, ms));

    async function stageTest() {

        const browser = await puppeteer.launch({
            headless: false,
            defaultViewport: null,
            args: ['--start-maximized', '--disable-infobar'],
            ignoreDefaultArgs: ['--enable-automation']
        });

        const page = await browser.newPage();
        await page.goto(pagePath);

        await sleep(1000);

        let result = await hs.testPage(page,
            // Test #1 - Check title
            () => {
                if (document.title !== 'To-Do List') {
                    return hs.wrong("The title of the page should be 'To-Do List'")
                }
                return hs.correct();
            },

            // Test #2 - Check elements
            () => {
                const inputField = document.getElementById("input-task")
                if (inputField === null || inputField.tagName !== 'INPUT')
                    return hs.wrong("Can't find input field with id '#input-task'")

                const addButton = document.getElementById("add-task-button")
                if (addButton === null || addButton.tagName !== 'BUTTON')
                    return hs.wrong("Can't find button with id '#add-task-button'")

                this.taskList = document.getElementById("task-list")
                if (this.taskList === null || this.taskList.tagName !== 'UL')
                    return hs.wrong("Can't find <ul> tag with id '#task-list'")

                return hs.correct();
            },

            // Test #3 - Check each task in task list
            () => {

                const tasks = this.taskList.getElementsByTagName("li")
                if (tasks.length !== 3)
                    return hs.wrong("Inside the <ul> tag should be 3 <li> elements!")

                for (let task of tasks) {
                    const checkbox = task.querySelector("input[type=checkbox]")
                    if (checkbox === null)
                        return hs.wrong("Inside each <li> tag should one <input> tag with 'checkbox' type")

                    const taskName = task.querySelector("span.task")
                    if (taskName === null)
                        return hs.wrong("Inside each <li> tag should one <span> tag with 'task' class")

                    const deleteButton = task.querySelector("button.delete-btn")
                    if (deleteButton === null)
                        return hs.wrong("Inside each <li> tag should one <button> tag with 'delete-btn' class")
                }

                return hs.correct();
            },

            // Test #4 - Test adding new task
            () => {

                const inputField = document.getElementById("input-task")
                if (inputField.tagName !== 'INPUT')
                    return hs.wrong("Can't find input field with id '#input-task'")

                inputField.value = "New task for the test purpose"

                const addButton = document.getElementById("add-task-button")
                if (addButton.tagName !== 'BUTTON')
                    return hs.wrong("Can't find button with id '#add-task-button'")

                addButton.click()

                const tasks = this.taskList.getElementsByTagName("li")
                if (tasks.length !== 4)
                    return hs.wrong("After adding a new task to the To-Do list, there should be 4 <li> tags inside the <ul> list")

                for (let task of tasks) {

                    const taskName = task.querySelector("span.task")
                    if (taskName === null)
                        return hs.wrong("Inside each <li> tag should one <spane> tag with 'task' class")

                    if (taskName.textContent === "New task for the test purpose") {
                        return hs.correct()
                    }
                }

                return hs.wrong("Can't find task with name 'New task for the test purpose'.\n" +
                    "The task name should be placed in <span> tag with class 'task'!")
            },

            // Test #5 - Deleting task
            () => {

                let tasks = this.taskList.getElementsByTagName("li")

                for (let task of tasks) {
                    const taskName = task.querySelector("span.task")
                    if (taskName === null)
                        return hs.wrong("Inside each <li> tag should one <spane> tag with 'task' class")

                    if (taskName.textContent === "New task for the test purpose") {
                        const deleteButton = task.querySelector("button.delete-btn")
                        if (deleteButton === null)
                            return hs.wrong("Inside each <li> tag should one <button> tag with 'delete-btn' class")
                        deleteButton.click()
                        break
                    }
                }

                tasks = this.taskList.getElementsByTagName("li")

                for (let task of tasks) {
                    const taskName = task.querySelector("span.task")
                    if (taskName === null)
                        return hs.wrong("Inside each <li> tag should one <spane> tag with 'task' class")

                    if (taskName.textContent === "New task for the test purpose") {
                        return hs.wrong("After deleting a task with name 'New task for the test purpose' it is still in the task list!")
                    }
                }

                return hs.correct()
            }
        );

        await browser.close();
        return result;
    }


    jest.setTimeout(30000);
    test("Test stage", async () => {
            let result = await stageTest();
            if (result['type'] === 'wrong') {
                fail(result['message']);
            }
        }
    );
  learner_created: false
- name: src/todo.js
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/projects/183/stages/928/implement#comment
status: Solved
feedback:
  message: Congratulations!
  time: Thu, 16 Sep 2021 15:41:11 UTC
record: 2
