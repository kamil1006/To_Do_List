type: edu
files:
- name: src/index.html
  visible: true
  text: |
    <!DOCTYPE html>
    <html lang="pl-PL">
    <head>
        <meta charset="UTF-8">
        <title>todo</title>
        <!-- CSS only -->
        <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.1/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-F3w7mX95PdgyTmZZMECAngseQB83DfGTowi0iMjiWaeVhAn4FJkqJByhZMI3AhiU" crossorigin="anonymous">
        <!-- JavaScript Bundle with Popper -->
        <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.1/dist/js/bootstrap.bundle.min.js" integrity="sha384-/bQdsTh/da6pkI1MST/rWKFNjaCP5gBSY4sEBT38Q/9RBh9AH40zEOg7Hlq2THRZ" crossorigin="anonymous"></script>




    </head>
    <body>


    <div class="jumbotron jumbotron-fluid">
        <div class="container">
            <h1 class="display-4">To Do List!</h1>
            <p class="lead">This is to do list:</p>
            <hr class="my-4">
        </div>
    </div>


    <div class="container">
        <form class="form-inline">
            <div class="row">
                <div class="col-6">
                    <input type="text" class="form-control" id="input-task" placeholder="to do task">
                </div>
                <div class="col">
                    <button type="submit" class="btn btn-primary mb-2" id="add-task-button">Confirm</button>
                </div>
            </div>
        </form>
    </div>


    <div class="container" id="wykaz">
        <div class="col-7">
            <ul class="list-group" id="task-list">

                <li class="list-group-item">
                    <div class="d-flex justify-content-between">
                        <div>
                            <input class="form-check-input me-1" type="checkbox" value="" aria-label="...">
                            <span class="task">First checkbox</span>
                        </div>
                        <div>
                            <button type="button" class="delete-btn close" aria-label="Close">
                                <span aria-hidden="true">&times;</span>
                            </button>
                        </div>
                    </div>
                </li>

                <li class="list-group-item">
                    <div class="d-flex justify-content-between">
                        <div>
                            <input class="form-check-input me-1" type="checkbox" value="" aria-label="...">
                            <span class="task">Second checkbox</span>
                        </div>
                        <div>
                            <button type="button" class="delete-btn" aria-label="Close">
                                <span aria-hidden="true">&times;</span>
                            </button>
                        </div>
                    </div>
                </li>

                <li class="list-group-item">
                    <div class="d-flex justify-content-between">
                        <div>
                            <input class="form-check-input me-1" type="checkbox" value="" aria-label="...">
                            <span class="task">Third checkbox</span>
                        </div>
                        <div>
                            <button type="button" class="delete-btn" aria-label="Close">
                                <span aria-hidden="true">&times;</span>
                            </button>
                        </div>
                    </div>
                </li>

            </ul>

        </div>
    </div>

    <script >


    </script>
    </body>
    </html>
  learner_created: false
- name: test/test.js
  visible: false
  text: |
    const puppeteer = require('puppeteer');
    const path = require('path');
    // '..' since we're in the test/ subdirectory; learner is supposed to have src/index.html
    const pagePath = 'file://' + path.resolve(__dirname, '../src/index.html');
    const hs = require('hs-test-web');
    const sleep = (ms) => new Promise(res => setTimeout(res, ms));

    async function stageTest() {

        const browser = await puppeteer.launch({
            headless: false,
            defaultViewport: null,
            args: ['--start-maximized', '--disable-infobar'],
            ignoreDefaultArgs: ['--enable-automation'],
        });

        const page = await browser.newPage();
        await page.coverage.startCSSCoverage();
        await page.goto(pagePath);

        await sleep(1000);

        let result = await hs.testPage(page,
            // Test #1 - Check title
            () => {
                if (document.title !== 'To-Do List') {
                    return hs.wrong("The title of the page should be 'To-Do List'")
                }

                return hs.correct();
            },

            // Test #2 - delete all the tasks
            async () => {

                let taskList = document.getElementById("task-list")

                if (taskList === null || taskList.tagName !== 'UL')
                    return hs.wrong("Can't find <ul> tag with id '#task-list'")

                let tasks = taskList.getElementsByTagName("li")

                const numberOfTasks = tasks.length;
                let counter = 0;

                while (true) {

                    if (counter > numberOfTasks) {
                        return hs.wrong("Looks like after deleting a task it is not removed from the task list!")
                    }

                    const deleteButton = document.querySelector("button.delete-btn")
                    if (deleteButton === null) {
                        break
                    }
                    deleteButton.click()

                    counter++
                }

                taskList = document.getElementById("task-list")
                if (taskList === null || taskList.tagName !== 'UL')
                    return hs.wrong("After deleting the tasks can't find <ul> tag with id '#task-list'")

                tasks = taskList.getElementsByTagName("li")

                if (tasks.length !== 0) {
                    return hs.wrong("After deleting all the tasks there shouldn't be any <li> tag")
                }

                return hs.correct()
            },

            // Test #3 - adding tasks
            async () => {
                const tasksName = ['First task', 'Second task', 'Third task', 'Fourth task', 'Fifth task']

                const inputField = document.getElementById("input-task")
                if (inputField === null || inputField.tagName !== 'INPUT')
                    return hs.wrong("Can't find input field with id '#input-task'")

                const addButton = document.getElementById("add-task-button")
                if (addButton === null || addButton.tagName !== 'BUTTON')
                    return hs.wrong("Can't find button with id '#add-task-button'")

                const taskList = document.getElementById("task-list")
                if (taskList === null || taskList.tagName !== 'UL')
                    return hs.wrong("Can't find <ul> tag with id '#task-list'")

                let currentTaskCounter = 1;

                for (let taskName of tasksName) {
                    inputField.value = taskName
                    addButton.click()

                    const tasks = taskList.getElementsByTagName("li")

                    if (tasks.length !== currentTaskCounter) {
                        return hs.wrong("After adding a task number of the <li> tags is not increased!")
                    }

                    currentTaskCounter++
                }

                return hs.correct()
            },

            // Test #4 - Check each task in task list
            () => {

                const taskList = document.getElementById("task-list")
                if (taskList.tagName !== 'UL')
                    return hs.wrong("Can't find <ul> tag with id '#task-list'")

                const tasks = taskList.getElementsByTagName("li")
                if (tasks.length !== 5)
                    return hs.wrong("Inside the <ul> tag should be 5 <li> elements after adding 5 tasks!")

                for (let task of tasks) {
                    const checkbox = task.querySelector("input[type=checkbox]")
                    if (checkbox === null)
                        return hs.wrong("Inside each <li> tag should one <input> tag with 'checkbox' type")

                    const taskName = task.querySelector("span.task")
                    if (taskName === null)
                        return hs.wrong("Inside each <li> tag should one <spane> tag with 'task' class")

                    const deleteButton = task.querySelector("button.delete-btn")
                    if (deleteButton === null)
                        return hs.wrong("Inside each <li> tag should one <button> tag with 'delete-btn' class")
                }


                return hs.correct();
            },

            // Test #5 - Check completed task
            async () => {
                const taskList = document.getElementById("task-list")
                if (taskList.tagName !== 'UL')
                    return hs.wrong("Can't find <ul> tag with id '#task-list'")

                let tasks = taskList.getElementsByTagName("li")

                for (let task of tasks) {
                    const taskName = task.querySelector("span.task")

                    if (taskName === null)
                        return hs.wrong("Inside each <li> tag should one <spane> tag with 'task' class")

                    if (taskName.textContent === 'Third task') {
                        const checkbox = task.querySelector("input[type=checkbox]")
                        checkbox.click()
                        break;
                    }
                }

                tasks = taskList.getElementsByTagName("li")

                for (let task of tasks) {

                    const taskName = task.querySelector("span.task")

                    if (taskName.textContent === 'Third task') {
                        let taskName = task.querySelector("span.task")
                        if (taskName === null)
                            return hs.wrong("Inside each <li> tag should be one <span> tag with 'task' class")

                        if (!taskName.style.textDecoration.includes("line-through") &&
                            !getComputedStyle(taskName).textDecoration.includes("line-through")) {
                            return hs.wrong("If checkbox is checked the task name should be crossed out.\n" +
                                "The span tag with task name should have 'text-decoration: line-trough' style")
                        }

                        return hs.correct()
                    }
                }

                return hs.wrong("Can't find task with name 'Third task' after it was added!")
            }
        );

        if (result.type === 'wrong') {
            await browser.close();
            return result;
        }

        await page.goto(pagePath);

        result = await hs.testPage(page,

            // Test #6(1) - Test task list after reloading the page
            async () => {

                const taskList = document.getElementById("task-list")
                if (taskList.tagName !== 'UL')
                    return hs.wrong("Can't find <ul> tag with id '#task-list'")

                const tasks = taskList.getElementsByTagName("li")

                if (tasks.length !== 5) {
                    return hs.wrong("Looks like you didn't store the tasks in the local storage.\n" +
                        "After refreshing the page expected 5 tasks!")
                }

                for (let task of tasks) {
                    const checkbox = task.querySelector("input[type=checkbox]")
                    if (checkbox === null)
                        return hs.wrong("Inside each <li> tag should one <input> tag with 'checkbox' type")

                    const taskName = task.querySelector("span.task")
                    if (taskName === null)
                        return hs.wrong("Inside each <li> tag should one <spane> tag with 'task' class")

                    const deleteButton = task.querySelector("button.delete-btn")
                    if (deleteButton === null)
                        return hs.wrong("Inside each <li> tag should one <button> tag with 'delete-btn' class")
                }

                return hs.correct()
            }
        );

        await browser.close();
        return result;
    }

    jest.setTimeout(30000);
    test("Test stage", async () => {
            let result = await stageTest();
            if (result['type'] === 'wrong') {
                fail(result['message']);
            }
        }
    );
  learner_created: false
- name: src/todo.js
  visible: true
  text: "let tasks =[];\ncounter = 4;\n\ndocument.addEventListener('DOMContentLoaded',\
    \ function() {\n\t//------------------------------------------------------\n\t\
    document.querySelector('#forma1').onsubmit = function() {\n\n\t\tconst taskValue\
    \ = document.getElementById('input-task').value;\n\t\tif(taskValue.length>0)\t\
    {\n\t\t\tcounter++;\n\t\t\tGeneruj();\n\n\t\t}\n\n\t\telse{\n\t\t\talert(\"have\
    \ to input something.\");\n\t\t}\n\n\n\t\treturn false;\n\t};\n\t//------------------------------------------------------\n\
    \n\tdocument.getElementById('checkbox1').addEventListener(\"click\",function(){linijka(1);}\
    \ );\n\tdocument.getElementById('checkbox2').addEventListener(\"click\",function(){linijka(2);}\
    \ );\n\tdocument.getElementById('checkbox3').addEventListener(\"click\",function(){linijka(3);}\
    \ );\n\t//------------------------------------------------------\n});\n\n\n//-------------------------------------------------------------------------------------------------------------\n\
    //-------------------------------------------------------------------------------------------------------------\n\
    function Generuj(){\n\n\n\tvar taskValue = document.getElementById('input-task').value;\n\
    \n\n\t//*********************\n\tconst el1 = document.createElement('li');\n\t\
    //var el1 = document.createElement('p');\n\tel1.className = \"list-group-item\"\
    ;\n\t//el1.innerHTML=\"kuku\";\n\tel1.id = \"task\"+counter;\n\tconst taskID =\
    \ \"task\"+counter;;\n\n\tconst el2 = document.createElement('div');\n\tel2.className\
    \ = \"d-flex justify-content-between\";\n\tconst el3 = document.createElement('div');\n\
    \tel3.className = \"\";\n\tconst el31 = document.createElement('input');\n\tel31.className\
    \ = \"form-check-input me-1\";\n\tel31.setAttribute(\"type\",\"checkbox\");\n\t\
    el31.setAttribute(\"value\",\"\");\n\tel31.setAttribute(\"aria-label\",\"...\"\
    );\n\tel31.id = \"checkbox\"+counter;\n\n\n\n\tconst el32 = document.createElement('span');\n\
    \tel32.className = \"task\";\n\tel32.id=\"taskspan\"+counter;\n\tel32.innerHTML\
    \ = taskValue;\n\t//el32.setAttribute = (\"text-decoration\",\"line-through;\"\
    );\n\n\n\tconst el4 = document.createElement('div');\n\tel4.className = \"\";\n\
    \tconst el41 = document.createElement('button');\n\tel41.className = \"delete-btn\"\
    ;\n\tel41.id = \"delete\"+counter;\n\tel41.setAttribute(\"aria-label\",\"Close\"\
    );\n\n\tel41.addEventListener(\"click\",function () {\n\t\tvar elem = document.getElementById(taskID);\n\
    \t\telem.parentNode.removeChild(elem);\n\n\n\n\t});\n\n\n\n\tconst el411 = document.createElement('span');\n\
    \tel411.setAttribute = (\"aria-hidden\",\"true\");\n\tel411.innerHTML = \"&times;\"\
    ;\n\n\n\tel41.appendChild(el411);\n\tel4.appendChild(el41);\n\n\tel3.appendChild(el31);\n\
    \tel3.appendChild(el32);\n\tel2.appendChild(el3);\n\tel2.appendChild(el4);\n\t\
    el1.appendChild(el2);\n\tconst el = document.getElementById('task-list');\n\t\
    el.appendChild(el1);\n\t//*********************\n\t//alert(\"baton kliked, task\
    \ = \" + taskValue);\n\tdocument.getElementById('input-task').value =\"\";\n\t\
    let a = counter;\n\tel31.addEventListener(\"click\",function(){linijka(a);} );\n\
    \n\n\n}\n//-------------------------------------------------------------------------------------------------------------\n\
    //-------------------------------------------------------------------------------------------------------------\n\
    function linijka(a) {\n\n\n\tlet cos = document.getElementById(\"checkbox\"+a);\n\
    \tconsole.log(\"checkbox\"+a+\" checked=\"+cos.checked+\"=\");\n\t//alert(cos.checked);\n\
    \tlet warunek = JSON.stringify(cos.checked);\n\tlet cos2 = document.getElementById(\"\
    taskspan\"+a);\n\n\tif(warunek == \"true\"){\n\n\t\t//cos2.setAttribute = (\"\
    text-decoration\",\"\");\n\t\t//cos2.setAttribute = (\"text-decoration\",\"line-through;\"\
    );\n\t\tcos2.style.textDecoration = \"line-through\";\n\t\tcos2.className=\"task\
    \ finished\";\n\t\t//text-decoration: line-through;\n\t\tconsole.log(\"tak \"\
    +cos2.innerHTML);\n\n\t}\n\telse{\n\t\t//cos2.setAttribute = (\"text-decoration\"\
    ,\"line-through;\");\n\t\tcos2.style.textDecoration = \"\";\n\t\tcos2.className=\"\
    task\";\n\t\tconsole.log(\"nies\");\n\n\n\t}\n\n\n}\n\n//-------------------------------------------------------------------------------------------------------------\n\
    \n\n"
  learner_created: true
feedback_link: https://hyperskill.org/projects/183/stages/930/implement#comment
status: Solved
feedback:
  message: Well done! You've finished the project. Select a new project on <a href="https://hyperskill.org/projects">JetBrains
    Academy</a> to continue learning.
  time: Wed, 22 Sep 2021 15:20:47 UTC
record: -1
